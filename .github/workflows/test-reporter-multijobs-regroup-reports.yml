name: test-reporter-multijobs-regroup-reports
on:
  workflow_dispatch:
  #push:
  #  branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

permissions:
  contents: write
  checks: write
  actions: write
#  pages: write
#  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false

jobs:
  build:
    #    environment:
    #      name: github-pages
    #      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      #- run: echo ${{ steps.deployment.outputs.page_url }}
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          #cache: 'maven'

      - name: Build with Maven
        run: mvn clean install -DskipTests
        #run: mvn -B package --file pom.xml

      - name: Cache maven dependencies
        uses: actions/cache@v2
        id: cache-maven-artifacts
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-

  test_group_a:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Run tests GroupA
        run: mvn test -DsuiteXmlFile="$GITHUB_WORKSPACE/src/test/testsuite/groupATest.xml"

      - name: Copy test results
        id: copy_test_results
        if: success() || failure()
        run: |
          mkdir -p $GITHUB_WORKSPACE/results/groupA
          cp -r target/surefire-reports $GITHUB_WORKSPACE/results/groupA/
          cp -r target/reports $GITHUB_WORKSPACE/results/groupA/
          ls -R $GITHUB_WORKSPACE/results/groupA/
        env:
          GROUPA_RESULTS_DIR: ${{ github.workspace }}/results/groupA

        #          cp -r target/surefire-reports ${{ github.workspace }}/results/groupA
        #          cp -r target/reports ${{ github.workspace }}/results/groupA
        #          cd ${{ github.workspace }}/results/groupA/target/surefire-reports
        #          ls

      - name: Upload extent reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: extent-reports-group-a
          path: ${{ github.workspace }}/results/groupA/reports/
          if-no-files-found: error

      - name: Upload surefire reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports-group-a
          path: ${{ github.workspace }}/results/groupA/surefire-reports/
          if-no-files-found: error

      - name: Publish Test Report
        id: publish_report
        uses: dorny/test-reporter@v1
        if: success() || failure() # always run even if the previous step fails
        with:
          name: Test Report GroupA
          reporter: java-junit
          only-summary: true #false
          list-suites: failed #all
          list-tests: failed #all
          fail-on-error: false
          path: '**/target/surefire-reports/junitreports/TEST-*.xml'

    outputs:
      test_results_output: ${{ steps.copy_test_results.outcome }}
      test_results_dir: ${{ env.GROUPA_RESULTS_DIR }}
      publish_report_output: ${{ steps.publish_report.outcome}}
      passed: ${{ steps.publish_report.outputs.passed }}
      failed: ${{ steps.publish_report.outputs.failed }}
      skipped: ${{ steps.publish_report.outputs.skipped }}
      time: ${{ steps.publish_report.outputs.time }}

  test_bundle_c:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Run tests BundleC
        run: mvn test -DsuiteXmlFile="$GITHUB_WORKSPACE/src/test/testsuite/bundleCTest.xml"

      #      - name: Copy test results
      #        id: copy_test_results
      #        if: success() || failure()
      #        run: |
      #          mkdir -p $GITHUB_WORKSPACE/results/groupB/bundleC
      #          cp -r target/surefire-reports $GITHUB_WORKSPACE/results/groupB/bundleC/
      #          cp -r target/reports $GITHUB_WORKSPACE/results/groupB/bundleC/
      #          ls -R $GITHUB_WORKSPACE/results/groupB/bundleC/
      #        env:
      #          GROUPB_RESULTS_DIR: ${{ github.workspace }}/results/groupB

      - name: Upload extent reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: extent-reports-test-bundleC
          path: "**/target/reports/*" #${{ github.workspace }}/results/groupB/bundleC/reports/*
          if-no-files-found: error

      - name: Upload surefire reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports-test-bundleC
          path: "**/target/surefire-reports/**/*"   #${{ github.workspace }}/results/groupB/bundleC/surefire-reports/**/*
          if-no-files-found: error

      - name: Publish Test Report
        id: publish_report
        uses: dorny/test-reporter@v1
        if: success() || failure() # always run even if the previous step fails
        with:
          name: Test Report BundleC
          reporter: java-junit
          only-summary: true #false
          list-suites: failed #all
          list-tests: failed #all
          fail-on-error: false
          path: '**/target/surefire-reports/junitreports/TEST-*.xml'

    outputs:
      test_results_output: ${{ steps.copy_test_results.outcome }}
      test_results_dir: ${{ env.GROUPB_RESULTS_DIR }}
      publish_report_output: ${{ steps.publish_report.outcome}}
      passed: ${{ steps.publish_report.outputs.passed }}
      failed: ${{ steps.publish_report.outputs.failed }}
      skipped: ${{ steps.publish_report.outputs.skipped }}
      time: ${{ steps.publish_report.outputs.time }}

  test_bundle_d:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Run tests BundleD
        run: mvn test -DsuiteXmlFile="$GITHUB_WORKSPACE/src/test/testsuite/bundleDTest.xml"

      #      - name: Copy test results
      #        id: copy_test_results
      #        if: success() || failure()
      #        run: |
      #          mkdir -p $GITHUB_WORKSPACE/results/groupB/bundleD
      #          cp -r target/surefire-reports $GITHUB_WORKSPACE/results/groupB/bundleD/
      #          cp -r target/reports $GITHUB_WORKSPACE/results/groupB/bundleD/
      #          ls -R $GITHUB_WORKSPACE/results/groupB/bundleD/
      #        env:
      #          GROUPB_RESULTS_DIR: ${{ github.workspace }}/results/groupB

      - name: Upload extent reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: extent-reports-test-bundleD
          path: "**/target/reports/*"   #${{ github.workspace }}/results/groupB/bundleD/reports/*
          if-no-files-found: error

      - name: Upload surefire reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports-test-bundleD
          path: "**/target/surefire-reports/**/*"   #${{ github.workspace }}/results/groupB/bundleD/surefire-reports/**/*
          if-no-files-found: error

      - name: Publish Test Report
        id: publish_report
        uses: dorny/test-reporter@v1
        if: success() || failure() # always run even if the previous step fails
        with:
          name: Test Report BundleD
          reporter: java-junit
          only-summary: true #false
          list-suites: failed #all
          list-tests: failed #all
          fail-on-error: false
          path: '**/target/surefire-reports/junitreports/TEST-*.xml'

    outputs:
      test_results_output: ${{ steps.copy_test_results.outcome }}
      test_results_dir: ${{ env.GROUPB_RESULTS_DIR }}
      publish_report_output: ${{ steps.publish_report.outcome}}
      passed: ${{ steps.publish_report.outputs.passed }}
      failed: ${{ steps.publish_report.outputs.failed }}
      skipped: ${{ steps.publish_report.outputs.skipped }}
      time: ${{ steps.publish_report.outputs.time }}

  #  deployReport:
  #    if: |
  #      (${{ success() }} || ${{ failure() }})
  #      && needs.buildTest.outputs.github_page_artifact_output == 'success'
  #    needs: buildTest
  #
  #    environment:
  #      name: github-pages
  #      url: ${{ steps.deployment.outputs.page_url }}
  #    runs-on: ubuntu-latest
  #    steps:

  #  upload_reports_group_a:
  #    if: |
  #      (${{ success() }} || ${{ failure() }})
  #      needs.test_group_a.outputs.test_results_output == 'success'
  #    needs: test_group_a
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #
  #      - name: check reports directory
  #        id: check_reports_dir
  #        if: success() || failure()
  #        run: |
  #          ls -R $GITHUB_WORKSPACE/results/groupA/
  #
  #        #          cp -r target/surefire-reports ${{ github.workspace }}/results/groupA
  #        #          cp -r target/reports ${{ github.workspace }}/results/groupA
  #        #          cd ${{ github.workspace }}/results/groupA/target/surefire-reports
  #        #          ls
  #
  #      - name: Upload extent reports
  #        if: success() || failure()
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: extent-reports-group-a
  #          path: ${{ github.workspace }}/results/groupA/reports/
  #          if-no-files-found: error
  #
  #      - name: Upload surefire reports
  #        if: success() || failure()
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: surefire-reports-group-a
  #          path: ${{ github.workspace }}/results/groupA/surefire-reports/
  #          if-no-files-found: error

  upload_reports_group_b:
    if: |
      (${{ success() }} || ${{ failure() }})
      needs.test_bundle_c.outputs.test_results_output == 'success'
      && needs.test_bundle_d.outputs.test_results_output == 'success'
    needs: [ test_bundle_c, test_bundle_d ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts extent reports C
        uses: actions/download-artifact@v3
        with:
          name: extent-reports-test-bundleC
          path: results/groupB/extent-reports/

      - name: Download artifacts extent reports D
        uses: actions/download-artifact@v3
        with:
          name: extent-reports-test-bundleD
          path: results/groupB/extent-reports/

#      - name: Zip GroupB Folder
#        run: |
#          # Ensure the 'zip' utility is installed
#          sudo apt-get update
#          sudo apt-get install -y zip
#
#          # Create a zip archive of the 'groupB' folder and its subdirectories
#          zip -r groupB.zip results/groupB
#
#          # Move the zip archive to the GitHub workspace
#          # mv groupB.zip $GITHUB_WORKSPACE
#
#        shell: bash

      - name: Upload group B extent reports
        uses: actions/upload-artifact@v3
        with:
          name: extent-reports-group-b
          path: ${{ github.workspace }}/results/groupB/extent-reports/

      - name: Download artifacts surefire reports C
        uses: actions/download-artifact@v3
        with:
          name: surefire-reports-test-bundleC
          path: results/groupB/surefire-reports/

      - name: Download artifacts surefire reports D
        uses: actions/download-artifact@v3
        with:
          name: surefire-reports-test-bundleD
          path: results/groupB/surefire-reports/

      - name: Upload group B surefire reports
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports-group-b
          path: ${{ github.workspace }}/results/groupB/surefire-reports/

          #      - name: Upload test reports
          #        if: success() || failure()
          #        uses: actions/upload-artifact@v3
          #        with:
          #          name: test-reports
          #          path: |
          #            **/target/logs/*
          #            **/target/reports/*

          #  ./target/logs/
          #  .target/reports/
          #  ./target/surefire-reports/

          #      - name: Upload surefire test reports
          #        if: success() || failure()
          #        uses: actions/upload-artifact@v3
          #        with:
          #          name: surefire-test-reports
          #          path: |
          #            **/target/surefire-reports/**/*

          #  ./target/surefire-reports/TEST*.xml

  publish_report_summary:
    if: |
      (${{ success() }} || ${{ failure() }})
      needs.test_group_a.outputs.publish_report_output == 'success'
      && needs.test_bundle_c.outputs.publish_report_output == 'success'
      && needs.test_bundle_d.outputs.publish_report_output == 'success'
#      needs.test_group_a.outputs.test_results_output == 'success'
#      && needs.test_bundle_c.outputs.test_results_output == 'success'
#      && needs.test_bundle_d.outputs.test_results_output == 'success'
    needs: [ test_group_a, test_bundle_c, test_bundle_d ]
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3

#      - name: Publish Test Report
#        id: publish_report
#        uses: dorny/test-reporter@v1
#        if: success() || failure() # always run even if the previous step fails
#        with:
#         name: Test Report
#         reporter: java-junit
#         only-summary: true
#         list-suites: all
#         list-tests: none
#         fail-on-error: false
#         path: '**/target/surefire-reports/TEST-*.xml'


        # path: '**/target/surefire-reports/junitreports/TEST-*.xml'

        #  path: '**/target/surefire-reports/TEST-*.xml'

      - name: Print Test Report Output
        if: success() || failure()
        run: | 
          echo "url: ${{ steps.publish_report.outputs.url }}"
          echo "url_html: ${{ steps.publish_report.outputs.url_html }}"
          echo "Passed count: ${{ needs.test_group_a.outputs.passed }} + ${{ needs.test_bundle_c.outputs.passed }} + ${{ needs.test_bundle_d.outputs.passed }}"
          echo "Failed count: ${{ needs.test_group_a.outputs.failed }} + ${{ needs.test_bundle_c.outputs.failed }} + ${{ needs.test_bundle_d.outputs.failed }}"
          echo "Skipped count: ${{ needs.test_group_a.outputs.skipped }} + ${{ needs.test_bundle_c.outputs.skipped }} + ${{ needs.test_bundle_d.outputs.skipped }}"
          echo "Execution time ms: ${{ needs.test_group_a.outputs.time }} + ${{ needs.test_bundle_c.outputs.time }} + ${{ needs.test_bundle_d.outputs.time }}"

      - name: Test Results Summary
        id: test_summary
        if: success() || failure()
        run: |
          passed=$((${{ needs.test_group_a.outputs.passed }}+${{ needs.test_bundle_c.outputs.passed }}+${{ needs.test_bundle_d.outputs.passed }}))
          failed=$((${{ needs.test_group_a.outputs.failed }}+${{ needs.test_bundle_c.outputs.failed }}+${{ needs.test_bundle_d.outputs.failed }}))
          skipped=$((${{ needs.test_group_a.outputs.skipped }}+${{ needs.test_bundle_c.outputs.skipped }}+${{ needs.test_bundle_d.outputs.skipped }}))
          time=$((${{ needs.test_group_a.outputs.time }}+${{ needs.test_bundle_c.outputs.time }}+${{ needs.test_bundle_d.outputs.time }}))
          total=$((passed+failed+skipped))
          passed_percentage=$((passed * 100 / total))
          failed_percentage=$((failed * 100 / total))
          skipped_percentage=$((skipped * 100 / total))
          
          echo "### Test Results Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "Total: $total tests" >> $GITHUB_STEP_SUMMARY
          echo ":heavy_check_mark: $passed_percentage% Passed: $passed"  >> $GITHUB_STEP_SUMMARY
          echo ":x: $failed_percentage% Failed: $failed" >> $GITHUB_STEP_SUMMARY
          echo ":white_circle: $skipped_percentage% Skipped: $skipped" >> $GITHUB_STEP_SUMMARY
          

#          passed_percentage=$(printf "%.2f" "$(echo "scale=2; $passed * 100 / $total" | bc)")
#          failed_percentage=$(printf "%.2f" "$(echo "scale=2; $failed * 100 / $total" | bc)")
#          skipped_percentage=$(printf "%.2f" "$(echo "scale=2; $skipped * 100 / $total" | bc)")
#
#          echo "### Test Results Summary :rocket:" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
#          echo "Total: $total" >> $GITHUB_STEP_SUMMARY
#          echo "| Results | Count | Percentage | " >> $GITHUB_STEP_SUMMARY
#          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
#          echo "| :heavy_check_mark: Passed: | $passed | $passed_percentage% |"  >> $GITHUB_STEP_SUMMARY
#          echo "| :x: Failed: | $failed | $failed_percentage% |" >> $GITHUB_STEP_SUMMARY
#          echo "| :white_circle: Skipped: | $skipped | $skipped_percentage% |" >> $GITHUB_STEP_SUMMARY
#          echo "Execution time (ms): $time" >> $GITHUB_STEP_SUMMARY

        #      - name: Setup Pages
        #        id: pages
        #        uses: actions/configure-pages@v3
        #        if: success() || failure()
        #
        #      - name: Print Setup Pages Output
        #        if: success() || failure()
        #        run: |
        #          echo "base_url: ${{ steps.pages.outputs.base_url }}"
        #          echo "origin: ${{ steps.pages.outputs.origin }}"
        #          echo "host: ${{ steps.pages.outputs.host }}"
        #          echo "base_path ${{ steps.pages.outputs.base_path }}"

        #      - name: Prepare files for Github pages
        #        if: success() || failure()
        #        run: |
        #          mkdir -p $GITHUB_WORKSPACE/_site/$GITHUB_RUN_ID
        #          cp -r target/reports $GITHUB_WORKSPACE/_site/$GITHUB_RUN_ID
        #          cp -r target/surefire-reports $GITHUB_WORKSPACE/_site/$GITHUB_RUN_ID
        #        working-directory: ${{ github.workspace }}
        #
        #      - name: Upload artifact for github page
        #        id: github_page_artifact
        #        uses: actions/upload-pages-artifact@v2
        #        if: success() || failure()
        #        with:
        #          name: 'github-pages'
        #          path: '${{ github.workspace }}/_site/'
        #          retention-days: 1
        #    outputs:
        #      github_page_artifact_output: ${{ steps.github_page_artifact.outcome }}
        #
        #  deployReport:
        #    if: |
        #      (${{ success() }} || ${{ failure() }})
        #      && needs.buildTest.outputs.github_page_artifact_output == 'success'
        #    needs: buildTest
        #
        #    environment:
        #      name: github-pages
        #      url: ${{ steps.deployment.outputs.page_url }}
        #    runs-on: ubuntu-latest
        #    steps:
        #      - name: Deploy to GitHub Pages
        #    if: needs.buildTest.outputs.github_page_artifact_output == 'success'
    #        id: deployment
    #        uses: actions/deploy-pages@v2

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
