name: get-artifacts
on:
  workflow_dispatch:
  #push:
  #  branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

permissions:
  contents: write
  checks: write
  actions: write
#  pages: write
#  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false

jobs:
  build:
    #    environment:
    #      name: github-pages
    #      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Get Artifacts By Run ID
        id: get_artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          retries: 2
          script: |
            const artifactNamesToDelete = ['extent-reports-test-bundleC', 'extent-reports-test-bundleD', 'surefire-reports-test-bundleC', 'surefire-reports-test-bundleD'];

            const response = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: 6688005839
            });
            
            console.log(JSON.stringify(response));
            
            response.data.artifacts
              .forEach(({ id, name}) => {
              if (artifactNamesToDelete.includes(name)) {
                console.log("id: " + id + " name: " + name);
              }
            });
            

      #            const deletionPromises = response.data.artifacts
      #              .filter(({ name }) => artifactNamesToDelete.includes(name))
      #              .map(({ id, name }) => {
      #                console.log("Deleting Artifact id: " + id + " name: " + name);
      #                return github.rest.actions.deleteArtifact({
      #                  owner: context.repo.owner,
      #                   repo: context.repo.repo,
      #                   artifact_id: id
      #                });
      #              });
      #
      #            const deletionResponses = await Promise.all(deletionPromises);
      #            console.log("Deletion responses:", JSON.stringify(deletionResponses));